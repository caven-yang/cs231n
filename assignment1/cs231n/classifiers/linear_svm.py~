import numpy as np
from random import shuffle
from past.builtins import xrange

def svm_loss_naive(W, X, y, reg):
  """
  Structured SVM loss function, naive implementation (with loops).

  Inputs have dimension D, there are C classes, and we operate on minibatches
  of N examples.

  Inputs:
  - W: A numpy array of shape (D, C) containing weights.
  - X: A numpy array of shape (N, D) containing a minibatch of data.
  - y: A numpy array of shape (N,) containing training labels; y[i] = c means
    that X[i] has label c, where 0 <= c < C.
  - reg: (float) regularization strength

  Returns a tuple of:
  - loss as single float
  - gradient with respect to weights W; an array of same shape as W
  """
  dW = np.zeros(W.shape) # initialize the gradient as zero
  
  # compute the loss and the gradient
  num_classes = W.shape[1]
  num_train = X.shape[0]
  loss = 0.0
  for i in xrange(num_train):
    scores = X[i].dot(W)
    correct_class_score = scores[y[i]]
    # how many incorrect classification contributed
    cnt_contributed = 0
    dW_i = np.zeros(W.shape)
    for j in xrange(num_classes):
      if j == y[i]:
        continue
      margin = scores[j] - correct_class_score + 1 # note delta = 1
      if margin > 0:
        loss += margin
        cnt_contributed += 1
        dW_i[:, j] = X[i]
    dW_i[:, y[i]] = cnt_contributed * (-1) * X[i]
    dW = dW + dW_i + 2*reg*W
    # now we have the gradient along X[i]
  # Right now the loss is a sum over all training examples, but we want it
  # to be an average instead so we divide by num_train.
  loss /= num_train
  dW /= num_train
  
  # Add regularization to the loss.
  loss += reg * np.sum(W * W)

  #############################################################################
  # TODO:                                                                     #
  # Compute the gradient of the loss function and store it dW.                #
  # Rather that first computing the loss and then computing the derivative,   #
  # it may be simpler to compute the derivative at the same time that the     #
  # loss is being computed. As a result you may need to modify some of the    #
  # code above to compute the gradient.                                       #
  #############################################################################

  return loss, dW


def svm_loss_vectorized(W, X, y, reg):
  """
  Structured SVM loss function, vectorized implementation.

  Inputs and outputs are the same as svm_loss_naive.
  """
  loss = 0.0
  dW = np.zeros(W.shape) # initialize the gradient as zero

  #############################################################################
  # TODO:                                                                     #
  # Implement a vectorized version of the structured SVM loss, storing the    #
  # result in loss.                                                           #
  #############################################################################
  (D, C) = W.shape
  (N, D2) = X.shape
  scores = np.matmul(X, W)
  # scores[i][j] means the score for the i-th training data for class j
  # now we want to know for image i, the scores of incorrect classification
  # first let's construct a mask matrix
  masks = np.zeros((N, C))
  # only masks[i, y[i]] = 1, otherwise 0
  for i in xrange(N):
      masks[i][y[i]] = 1

  incorrect_masks = np.ones((N,C)) - masks

  correct_scores = masks * scores
  # make it a vector
  correct_score_v = np.transpose(np.sum(correct_scores, axis=-1))
  # broadcast it to (N,C)
  correct_score_hack = np.transpose(np.broadcast_to(correct_score_v, (C,N)))

  incorrect_scores = scores - correct_score_hack + 1
  # we need to make sure not to sum the correct predications

  # finally let's eliminate the negatives
  negative_masks = np.sign(incorrect_scores) + np.ones(incorrect_scores.shape)
  # note that it is twice as big

  incorrect_scores = incorrect_scores * negative_masks * incorrect_masks
  loss = np.sum(incorrect_scores) / 2. / N

  
  #############################################################################
  #                             END OF YOUR CODE                              #
  #############################################################################


  #############################################################################
  # TODO:                                                                     #
  # Implement a vectorized version of the gradient for the structured SVM     #
  # loss, storing the result in dW.                                           #
  #                                                                           #
  # Hint: Instead of computing the gradient from scratch, it may be easier    #
  # to reuse some of the intermediate values that you used to compute the     #
  # loss.                                                                     #
  #############################################################################
  pass
  #############################################################################
  #                             END OF YOUR CODE                              #
  #############################################################################

  return loss, dW
